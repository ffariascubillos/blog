Pasos para usar app /blog/

03- Rutas en Laravel ....

1- Revisar rutas /routes/web.php
2- La lógica de programación va en el controlador

archivo /routes/web.php

Route::get('/', function () {
    // return view('welcome');
    return "Hola Amigos";
});

Route::get('cursos', function(){
    return "Bienvenido a la página cursos";
});

Route::get('cursos/create', function(){
    return "En esta página podrás crear un curso";
});

// Route::get('cursos/{curso}', function($curso){
//     return "Bienvenido al curso de $curso";
// });

Route::get('cursos/{curso}/{categoria?}', function($curso, $categoria = null){

    //categoria? = el signo de interrogación significa de que no es obligatorio poner esta variable en la url. En la función anónima se debe declarar $categoria = null, ya que en el caso de no ingresar un valor, este queda null.

    if( $categoria ) {
        return "Bienvenido al curso de $curso, de la categoría $categoria";
    } else {
        return "Bienvenido al curso de $curso";
    }
    
});


04- Controladores en Laravel ....

Laravel se basa en el patrón de diseño MVC (Modelo Vista Controlador).

User -> Consulta al $Controlador -> $Controlador consulta al -> $Modelo -> Este consulta a la base de datos, $Modelo recibo la información, y este se la vuelve a entregar al $Controlador, $Controlador envía los datos a la $Vista -> $Vista muestra los datos al User.

> php artisan make:controller HomeController


web.php

Route::get('/', HomeController::class );

Route::get('cursos', [CursoController::class, 'index'] );

// Route::get('cursos', 'CursoController@index' ); // Así se definían los controladores y rutas en laravel 7 para abajo

Route::get('cursos/create', [CursoController::class, 'create'] );

Route::get('cursos/{curso}', [CursoController::class, 'show'] );


05 - Grupos de rutas (Route Groups) ...

web.php

Route::get('/', HomeController::class );


Route::controller(CursoController::class)->group(function(){
    Route::get('cursos', 'index');
    Route::get('cursos/create', 'create');
    Route::get('cursos/{curso}', 'show');
});


06 - Vistas en Laravel

Usamos Blade, a todas las vistas le pusimos .blade.php


07 - Introducción al manejo de base de datos con Laravel

- Prender xampp u otro
- Crear database en localhost/phpmyadmin
- Especificar a laravel que vamos trabajar con MySQL .env, ( /config/database.php no se modifica por seguridad).


08 - Introducción a las migraciones.

// migra los archivos de migración desde /database/migrations/
> php artisan migrate


09 - Cómo crear migraciones en Laravel

// crea tu propia migración
> php artisan make:migration cursos

// método up() migra, y down() revierte el proceso.

// rollback de tu migración
> php artisan migrate:rollback

// crear migración con convesión
> php aritsan make:migration create_cursos_table

// eliminar todas las tablas, usar con precaución (no usar en producción)
> php artisan migrate:fresh


10 - Cómo modificar tablas con las migraciones de Laravel

// elimina las tablas uno a uno, después migra nuevamente
// utiliza método down() y después up()
> php artisan migrate:refresh

// crea una migración nueva para una tabla (migración ya creada)
// ejemplo, acá queremos agregar el avatar a la tabla users (creada anteriormente).
> php artisan make:migration add_avatar_to_users_table

// Con esto vamos a cambiar el valor del campo 'name' a 150 caracteres.
> php artisan make:migration cambiar_propiedades_to_users_table

Schema::table('users', function (Blueprint $table) {
    $table->string('name', 150)->nullable->change(); // anteriormente tenía 255
});


11 - Introducción a eloquent

Primero que todo debemos crear un modelo,
con convensión.

Eloquent detecta la "s" si queremos trabajar con convensiones.
Ejemplo: Category (model) // categories (table)

// creamos un modelo Curso para administrar la tabla cursos
// ocupar singular en comparación con el nombre de la table
// ya que por el inglés quita la última "s" para realizar la asociación y convensión
> php artisan make:model Curso 

// Utilizamos Tinker
// nos sirve para crear objetos de datos
> php artisan tinker

// Utilizamos un namespace
> use App\Models\Curso;
// instanciamos la clase curso en un objeto
> $curso = new Curso;
// poblamos los campos
> $curso->name = 'Laravel';
> $curso->descripcion = 'El mejor framework de PHP';
// guardamos el registro
> $curso->save();
// imprime para comprobar
> $curso;

// Ejemplo si quisieramos administrar la tabla users
// con la clase Curso.php
class Curso extends Model
{
    use HasFactory;

    protected $table = "Users";
}

12. Seeders en Laravel ¿Qué son y para que sirven?

Los seeders te permiten definir datos de prueba en código y ejecutarlos de manera automatizada, lo que facilita el proceso de llenado de datos en la base de datos. En este capítulo, te enseñaremos cómo crear y ejecutar seeders en Laravel, cómo definir datos de prueba y cómo utilizar las relaciones Eloquent para crear datos de prueba relacionados. Además, conocerás cómo utilizar las clases Factory en Laravel para crear datos aleatorios y cómo utilizar el comando "db:seed" para ejecutar tus seeders. Con estos conocimientos, podrás llenar la base de datos con datos de prueba de manera fácil y automatizada en tus aplicaciones Laravel.

public function run(): void
{
    $curso = new Curso();

    $curso->name = 'Laravel';
    $curso->descripcion = 'El mejor frame de PHP';
    $curso->categoria = 'Desarrollo web';
    
    $curso->save();
}

// llena con registro que has solicitado dentro del seeder
> php artisan db:seed

// crea un nuevo seeder
> php artisan make:seeder CursoSeeder

// combina los 2 comandos para hacerla corta 
> php artisan migrate:fresh --seed


13. Factories en Laravel ¿Qué son y para que sirven?

Las factories te permiten definir patrones para generar datos aleatorios y luego utilizarlos para llenar la base de datos con datos de prueba de manera automatizada. En este capítulo, te enseñaremos cómo crear y utilizar factories en Laravel, cómo definir los campos de las tablas y cómo utilizar las relaciones Eloquent para crear datos de prueba relacionados. Además, conocerás cómo utilizar las factories para generar datos de prueba en formato JSON, cómo utilizar los traits para crear datos aleatorios y cómo utilizar las factories para realizar pruebas automatizadas en Laravel. Con estos conocimientos, podrás generar datos de prueba de manera efectiva y automatizada en tus aplicaciones Laravel utilizando factories.

// Crea un nuevo Factory

> php artisan make:factory CursoFactory
> php artisan make:factory CursoFactory --model=Curso


16. Cómo listar y leer registros en Laravel

La lectura y listado de registros es una tarea fundamental en el desarrollo de aplicaciones web. En el decimocuarto capítulo del curso "Laravel desde cero", aprenderás a listar y leer registros en Laravel utilizando la función all, find, findOrFail y where. La función all te permite recuperar todos los registros de una tabla, mientras que la función find te permite recuperar un registro específico en función de su ID. La función findOrFail te permite recuperar un registro específico en función de su ID, pero lanzará una excepción si no se encuentra el registro. La función where te permite recuperar un conjunto de registros que cumplen una determinada condición. Además, en este capítulo, también aprenderás a utilizar la paginación para listar registros de manera eficiente y cómo realizar búsquedas utilizando la función where en combinación con la paginación. Con estos conocimientos, podrás listar y leer registros de manera efectiva y eficiente en tus aplicaciones Laravel.

17. C+omo generar un Dominio local (virtual host) con Windows y XAMPP

18. Cómo agregar y actualizar registros desde un formulario
Agregar y actualizar registros desde un formulario es una tarea común en el desarrollo de aplicaciones web con Laravel. Aprenderás a utilizar la función create y update, respectivamente, para agregar y actualizar registros en la base de datos. La función create te permite agregar un nuevo registro a una tabla utilizando los valores proporcionados por el usuario en un formulario, mientras que la función update te permite actualizar un registro existente en función de su ID utilizando los valores proporcionados por el usuario en un formulario. Aprenderás a utilizar el método fill para actualizar los valores de un registro de manera segura y a validar los datos del formulario antes de agregar o actualizar un registro. También conocerás cómo utilizar la función redirect para redirigir al usuario a una página específica después de agregar o actualizar un registro. Con estos conocimientos, podrás agregar y actualizar registros de manera segura y eficiente en tus aplicaciones web desarrolladas en Laravel.


19. Cómo validar formularios en Laravel
La validación de formularios es una tarea importante para garantizar la integridad y la calidad de los datos ingresados por el usuario. En Laravel, puedes validar fácilmente los datos de un formulario utilizando la clase Validator. En el decimosexto capítulo del curso Laravel desde cero, aprenderás a utilizar esta clase para validar los datos ingresados en un formulario. Aprenderás a definir reglas de validación para cada campo del formulario, como requerido, longitud máxima, longitud mínima, formato de correo electrónico y más. También aprenderás a personalizar los mensajes de error y a mostrarlos en la vista. Además, conocerás cómo utilizar la función old para mostrar los datos ingresados por el usuario en caso de un error de validación. Con estos conocimientos, podrás validar los datos de los formularios de manera eficiente y garantizar la calidad de los datos ingresados por el usuario en tus aplicaciones Laravel.

// instalar paquete de idioma en español

> php artisan lang:publish
> composer require --dev laravel-lang/common
> php artisan lang:add es

// ir a la siguiente ruta, y cambiar idioma en la variable default 'en'
config > app.php = 'locale' -> 'your idiom', 


20. Qué son los Form Request
Los Form Request son clases en Laravel que permiten centralizar la validación de los datos de los formularios en una sola ubicación y mejorar la reutilización del código. En lugar de validar los datos del formulario directamente en el controlador, puedes crear una clase Form Request que encapsule las reglas de validación y la lógica de validación. Los Form Request en Laravel son una forma conveniente de validar los datos del formulario antes de que lleguen al controlador, lo que ayuda a mantener el código organizado y limpio. En el decimoséptimo capítulo del curso "Laravel desde cero", aprenderás a utilizar los Form Request en Laravel para validar los datos del formulario y cómo personalizar los mensajes de error y las reglas de validación en función de las necesidades de tu aplicación. Con estos conocimientos, podrás mejorar la calidad del código de tus aplicaciones Laravel y mantener la validación de los datos del formulario de manera centralizada.

// crear un form Request para el formulario Cursos
> php artisan make:request StoreCurso


21. Qué es asignación masiva
La asignación masiva (Mass Assignment) en Laravel se refiere a la técnica de asignar valores a múltiples atributos de un modelo de forma simultánea utilizando un solo arreglo de datos. En lugar de asignar los valores uno por uno, puedes usar la asignación masiva para asignar múltiples valores a la vez. Si bien esto es conveniente y ahorra tiempo, también puede ser peligroso ya que puede permitir la asignación de valores a atributos que no deberían ser accesibles para el usuario, como contraseñas o valores de administrador. Para abordar este problema, Laravel proporciona la función fillable y guarded en los modelos para especificar los atributos que pueden ser asignados de forma masiva o los que deben ser protegidos contra la asignación masiva. En el decimoctavo capítulo del curso "Laravel desde cero", aprenderás cómo utilizar la asignación masiva en Laravel y cómo proteger tu aplicación de vulnerabilidades de seguridad relacionadas con la asignación masiva. Con estos conocimientos, podrás utilizar la asignación masiva de manera segura y eficiente en tus aplicaciones Laravel.


22. Cómo eliminar un registro de la base de datos
En Laravel, puedes eliminar un registro de la base de datos utilizando el método delete() en un modelo. El método delete() eliminará el registro correspondiente en la base de datos. Para eliminar un registro específico, primero debes obtener el modelo que representa ese registro. Esto se puede hacer utilizando el método find() en el modelo, que busca un registro por su identificador único en la base de datos. Una vez que tienes el modelo que deseas eliminar, simplemente llamas al método delete() en el modelo.


23. Cómo crear rutas con route resource
En Laravel, puedes crear rutas para un recurso (como un modelo) de manera eficiente utilizando el método route::resource(). Este método crea automáticamente varias rutas para las operaciones CRUD (Create, Read, Update, Delete) de tu recurso, como index, create, store, show, edit, update y destroy. Estas rutas te permiten manejar fácilmente las solicitudes HTTP de tu aplicación y realizar las operaciones CRUD en tu modelo. Para utilizar route::resource(), simplemente debes definir una ruta que apunte a tu controlador y llamar al método route::resource() en esa ruta.

// mostrar listado de rutas de tu proyecto
> php artisan r:l

// cambiar nombre url -> edit = editar
// dirigirse a App\Providers\RouteServiceProvider:
// https://laravel.com/docs/10.x/controllers#main-content
// pegar el siguiente código dentro del método boot().

Route::resourceVerbs([
    'create' => 'crear',
    'edit' => 'editar',
]);

// Opcional, modificar archivo web.php para cambiar nombre de URL ejemplo de 'cursos' a 'asignaturas'

Route::get('/', HomeController::class )->name('home');

Route::resource('asignaturas', CursoController::class)->parameters(['asignaturas' => 'curso'])->names('cursos');


24. Cómo generar url's amigables
En este capítulo de Laravel, aprenderás a utilizar la función getRouteKeyName para crear URL amigables y fáciles de recordar para tus modelos en Laravel. Con getRouteKeyName, puedes especificar el nombre de un campo de tu modelo para que sea utilizado como clave en lugar del id predeterminado. Esto te permitirá crear URLs más legibles y semánticamente significativas para tus usuarios, lo que a su vez mejorará la experiencia del usuario y el SEO de tu sitio. Aprenderás cómo implementar getRouteKeyName en tu proyecto Laravel y cómo personalizar tus URL utilizando los nombres de campo que mejor se adapten a tus necesidades.

// Agregar en el modelo curso
// se puede usar el método getRouteKeyName para cambiar el nombre de la ruta

public function getRouteKeyName()
{
    return 'slug';
}